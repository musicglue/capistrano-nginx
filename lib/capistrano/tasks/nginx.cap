require 'tempfile'

namespace :nginx do
  desc <<-DESC
    Installs stuff for Nginx. Docs coming soon.
  DESC

  task :install do
    on roles(:web) do
      config_file = 'config/deploy/templates/nginx_conf.erb'
      unless File.exists?(config_file)
        config_file = File.expand_path('../../../../templates/nginx_conf.erb', __FILE__)
      end

      local = Tempfile.new(Time.now.to_i.to_s)
      local.write ERB.new(File.read(config_file)).result(binding)
      local.close
      upload!(local.path, "/tmp/#{fetch(:nginx_config_file)}")

      local.unlink

      execute :sudo, "mv", "/tmp/#{fetch(:nginx_config_file)}", "#{fetch(:nginx_root)}/sites-available/#{fetch(:nginx_config_file)}"
    end
  end

  task :disable do
    on roles(:web) do
      execute :sudo, 'rm', "#{fetch(:nginx_root)}/sites-enabled/#{fetch(:nginx_config_file)}"
    end
  end

  task :enable do
    on roles(:web) do
      execute :sudo, 'ln', '-fs', "#{fetch(:nginx_root)}/sites-available/#{fetch(:nginx_config_file)}", "#{fetch(:nginx_root)}/sites-enabled/#{fetch(:nginx_config_file)}"
    end
  end

  task :reload do
    on roles(:web) do
      execute :sudo, 'service', 'nginx', 'reload'
    end
  end

  task :update do
  end

  task :test do
    on roles(:web) do
      execute :sudo, 'service', 'nginx', 'test'
    end
  end

  before :update,   'nginx:install'
  after  :update,   'nginx:enable'
  after  :enable,   'nginx:reload'
  after  :disable,  'nginx:reload'
end

namespace :load do
  task :defaults do
    set :nginx_service,       ->{ fetch(:application) }
    set :nginx_port,          '80'
    set :nginx_host,          'localhost'
    set :nginx_user,          ->{ fetch(:user) }
    set :nginx_config_file,   ->{ "#{fetch(:application)}.conf" }
    set :nginx_root,          '/etc/nginx'
  end
end